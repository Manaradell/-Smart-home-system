
mini_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000936  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00000936  000009aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a68  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d35  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ca  00000000  00000000  000028e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e90  00000000  00000000  000032b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000298  00000000  00000000  00004144  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000629  00000000  00000000  000043dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a48  00000000  00000000  00004a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0000644d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3e       	cpi	r26, 0xEE	; 238
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <main>
  7a:	0c 94 99 04 	jmp	0x932	; 0x932 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CLCD_WriteInes>:
		}else
		{
			CLCD_WriteData('A'+(Lower_bits-10));
		}

}
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>
  90:	6c 2f       	mov	r22, r28
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_enumSetPortValue>
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>
  a2:	89 ef       	ldi	r24, 0xF9	; 249
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <CLCD_WriteInes+0x24>
  aa:	00 c0       	rjmp	.+0      	; 0xac <CLCD_WriteInes+0x2a>
  ac:	00 00       	nop
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>
  b8:	89 ef       	ldi	r24, 0xF9	; 249
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <CLCD_WriteInes+0x3a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <CLCD_WriteInes+0x40>
  c2:	00 00       	nop
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <CLCD_init>:
  c8:	6f ef       	ldi	r22, 0xFF	; 255
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_enumSetPortDirection>
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 03 01 	call	0x206	; 0x206 <DIO_enumSetPinDirection>
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 03 01 	call	0x206	; 0x206 <DIO_enumSetPinDirection>
  e4:	83 ed       	ldi	r24, 0xD3	; 211
  e6:	90 e3       	ldi	r25, 0x30	; 48
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <CLCD_init+0x20>
  ec:	00 c0       	rjmp	.+0      	; 0xee <CLCD_init+0x26>
  ee:	00 00       	nop
  f0:	88 e3       	ldi	r24, 0x38	; 56
  f2:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_WriteInes>
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_WriteInes>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_WriteInes>
 102:	89 ef       	ldi	r24, 0xF9	; 249
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <CLCD_init+0x3e>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <CLCD_init+0x44>
 10c:	00 00       	nop
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_WriteInes>
 114:	08 95       	ret

00000116 <CLCD_WriteData>:
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
 11a:	41 e0       	ldi	r20, 0x01	; 1
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>
 124:	6c 2f       	mov	r22, r28
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_enumSetPortValue>
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>
 136:	89 ef       	ldi	r24, 0xF9	; 249
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <CLCD_WriteData+0x24>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <CLCD_WriteData+0x2a>
 140:	00 00       	nop
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>
 14c:	89 ef       	ldi	r24, 0xF9	; 249
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <CLCD_WriteData+0x3a>
 154:	00 c0       	rjmp	.+0      	; 0x156 <CLCD_WriteData+0x40>
 156:	00 00       	nop
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <CLCD_WriteChar>:
 15c:	0e 94 8b 00 	call	0x116	; 0x116 <CLCD_WriteData>
 160:	08 95       	ret

00000162 <CLCD_GoTo>:
 162:	81 50       	subi	r24, 0x01	; 1
 164:	19 f0       	breq	.+6      	; 0x16c <CLCD_GoTo+0xa>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	31 f0       	breq	.+12     	; 0x176 <CLCD_GoTo+0x14>
 16a:	08 95       	ret
 16c:	8f e7       	ldi	r24, 0x7F	; 127
 16e:	86 0f       	add	r24, r22
 170:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_WriteInes>
 174:	08 95       	ret
 176:	8f eb       	ldi	r24, 0xBF	; 191
 178:	86 0f       	add	r24, r22
 17a:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_WriteInes>
 17e:	08 95       	ret

00000180 <CLCD_SendString>:
		i++;
	}
}*/

void CLCD_SendString(U8 *String)
{
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	8c 01       	movw	r16, r24
m
a
r
\0*/

	U8 i=0;
 188:	c0 e0       	ldi	r28, 0x00	; 0
	while(String[i]!='\0')
 18a:	03 c0       	rjmp	.+6      	; 0x192 <CLCD_SendString+0x12>
	{
		CLCD_WriteData(String[i]);
 18c:	0e 94 8b 00 	call	0x116	; 0x116 <CLCD_WriteData>
		i++;
 190:	cf 5f       	subi	r28, 0xFF	; 255
a
r
\0*/

	U8 i=0;
	while(String[i]!='\0')
 192:	f8 01       	movw	r30, r16
 194:	ec 0f       	add	r30, r28
 196:	f1 1d       	adc	r31, r1
 198:	80 81       	ld	r24, Z
 19a:	81 11       	cpse	r24, r1
 19c:	f7 cf       	rjmp	.-18     	; 0x18c <CLCD_SendString+0xc>





}
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <CLCD_CLR>:
{




	CLCD_WriteInes(0X01);
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_WriteInes>
 1ac:	08 95       	ret

000001ae <DIO_enumSetPortDirection>:
		break;
	default:
		LOC_enumState=dok_state;
	}
	return LOC_enumState;
}
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	49 f0       	breq	.+18     	; 0x1c4 <DIO_enumSetPortDirection+0x16>
 1b2:	28 f0       	brcs	.+10     	; 0x1be <DIO_enumSetPortDirection+0x10>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	49 f0       	breq	.+18     	; 0x1ca <DIO_enumSetPortDirection+0x1c>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	51 f0       	breq	.+20     	; 0x1d0 <DIO_enumSetPortDirection+0x22>
 1bc:	0c c0       	rjmp	.+24     	; 0x1d6 <DIO_enumSetPortDirection+0x28>
 1be:	6a bb       	out	0x1a, r22	; 26
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	08 95       	ret
 1c4:	67 bb       	out	0x17, r22	; 23
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	08 95       	ret
 1ca:	64 bb       	out	0x14, r22	; 20
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
 1d0:	61 bb       	out	0x11, r22	; 17
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	08 95       	ret
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	08 95       	ret

000001da <DIO_enumSetPortValue>:
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	49 f0       	breq	.+18     	; 0x1f0 <DIO_enumSetPortValue+0x16>
 1de:	28 f0       	brcs	.+10     	; 0x1ea <DIO_enumSetPortValue+0x10>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	49 f0       	breq	.+18     	; 0x1f6 <DIO_enumSetPortValue+0x1c>
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	51 f0       	breq	.+20     	; 0x1fc <DIO_enumSetPortValue+0x22>
 1e8:	0c c0       	rjmp	.+24     	; 0x202 <DIO_enumSetPortValue+0x28>
 1ea:	6b bb       	out	0x1b, r22	; 27
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret
 1f0:	68 bb       	out	0x18, r22	; 24
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	08 95       	ret
 1f6:	65 bb       	out	0x15, r22	; 21
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	08 95       	ret
 1fc:	62 bb       	out	0x12, r22	; 18
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret

00000206 <DIO_enumSetPinDirection>:
 206:	88 30       	cpi	r24, 0x08	; 8
 208:	08 f0       	brcs	.+2      	; 0x20c <DIO_enumSetPinDirection+0x6>
 20a:	8e c0       	rjmp	.+284    	; 0x328 <DIO_enumSetPinDirection+0x122>
 20c:	61 30       	cpi	r22, 0x01	; 1
 20e:	49 f1       	breq	.+82     	; 0x262 <DIO_enumSetPinDirection+0x5c>
 210:	38 f0       	brcs	.+14     	; 0x220 <DIO_enumSetPinDirection+0x1a>
 212:	62 30       	cpi	r22, 0x02	; 2
 214:	09 f4       	brne	.+2      	; 0x218 <DIO_enumSetPinDirection+0x12>
 216:	46 c0       	rjmp	.+140    	; 0x2a4 <DIO_enumSetPinDirection+0x9e>
 218:	63 30       	cpi	r22, 0x03	; 3
 21a:	09 f4       	brne	.+2      	; 0x21e <DIO_enumSetPinDirection+0x18>
 21c:	64 c0       	rjmp	.+200    	; 0x2e6 <DIO_enumSetPinDirection+0xe0>
 21e:	86 c0       	rjmp	.+268    	; 0x32c <DIO_enumSetPinDirection+0x126>
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	71 f4       	brne	.+28     	; 0x240 <DIO_enumSetPinDirection+0x3a>
 224:	4a b3       	in	r20, 0x1a	; 26
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	b9 01       	movw	r22, r18
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_enumSetPinDirection+0x2c>
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	8a 95       	dec	r24
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_enumSetPinDirection+0x28>
 236:	cb 01       	movw	r24, r22
 238:	84 2b       	or	r24, r20
 23a:	8a bb       	out	0x1a, r24	; 26
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	08 95       	ret
 240:	41 11       	cpse	r20, r1
 242:	76 c0       	rjmp	.+236    	; 0x330 <DIO_enumSetPinDirection+0x12a>
 244:	4a b3       	in	r20, 0x1a	; 26
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	b9 01       	movw	r22, r18
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_enumSetPinDirection+0x4c>
 24e:	66 0f       	add	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	8a 95       	dec	r24
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_enumSetPinDirection+0x48>
 256:	cb 01       	movw	r24, r22
 258:	80 95       	com	r24
 25a:	84 23       	and	r24, r20
 25c:	8a bb       	out	0x1a, r24	; 26
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	08 95       	ret
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	71 f4       	brne	.+28     	; 0x282 <DIO_enumSetPinDirection+0x7c>
 266:	47 b3       	in	r20, 0x17	; 23
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	b9 01       	movw	r22, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_enumSetPinDirection+0x6e>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	8a 95       	dec	r24
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_enumSetPinDirection+0x6a>
 278:	cb 01       	movw	r24, r22
 27a:	84 2b       	or	r24, r20
 27c:	87 bb       	out	0x17, r24	; 23
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	08 95       	ret
 282:	41 11       	cpse	r20, r1
 284:	57 c0       	rjmp	.+174    	; 0x334 <DIO_enumSetPinDirection+0x12e>
 286:	47 b3       	in	r20, 0x17	; 23
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	b9 01       	movw	r22, r18
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_enumSetPinDirection+0x8e>
 290:	66 0f       	add	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	8a 95       	dec	r24
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_enumSetPinDirection+0x8a>
 298:	cb 01       	movw	r24, r22
 29a:	80 95       	com	r24
 29c:	84 23       	and	r24, r20
 29e:	87 bb       	out	0x17, r24	; 23
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	08 95       	ret
 2a4:	41 30       	cpi	r20, 0x01	; 1
 2a6:	71 f4       	brne	.+28     	; 0x2c4 <DIO_enumSetPinDirection+0xbe>
 2a8:	44 b3       	in	r20, 0x14	; 20
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	b9 01       	movw	r22, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_enumSetPinDirection+0xb0>
 2b2:	66 0f       	add	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	8a 95       	dec	r24
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_enumSetPinDirection+0xac>
 2ba:	cb 01       	movw	r24, r22
 2bc:	84 2b       	or	r24, r20
 2be:	84 bb       	out	0x14, r24	; 20
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
 2c4:	41 11       	cpse	r20, r1
 2c6:	38 c0       	rjmp	.+112    	; 0x338 <DIO_enumSetPinDirection+0x132>
 2c8:	44 b3       	in	r20, 0x14	; 20
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	b9 01       	movw	r22, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_enumSetPinDirection+0xd0>
 2d2:	66 0f       	add	r22, r22
 2d4:	77 1f       	adc	r23, r23
 2d6:	8a 95       	dec	r24
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_enumSetPinDirection+0xcc>
 2da:	cb 01       	movw	r24, r22
 2dc:	80 95       	com	r24
 2de:	84 23       	and	r24, r20
 2e0:	84 bb       	out	0x14, r24	; 20
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
 2e6:	41 30       	cpi	r20, 0x01	; 1
 2e8:	71 f4       	brne	.+28     	; 0x306 <DIO_enumSetPinDirection+0x100>
 2ea:	41 b3       	in	r20, 0x11	; 17
 2ec:	21 e0       	ldi	r18, 0x01	; 1
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	b9 01       	movw	r22, r18
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_enumSetPinDirection+0xf2>
 2f4:	66 0f       	add	r22, r22
 2f6:	77 1f       	adc	r23, r23
 2f8:	8a 95       	dec	r24
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_enumSetPinDirection+0xee>
 2fc:	cb 01       	movw	r24, r22
 2fe:	84 2b       	or	r24, r20
 300:	81 bb       	out	0x11, r24	; 17
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	08 95       	ret
 306:	41 11       	cpse	r20, r1
 308:	19 c0       	rjmp	.+50     	; 0x33c <DIO_enumSetPinDirection+0x136>
 30a:	41 b3       	in	r20, 0x11	; 17
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	b9 01       	movw	r22, r18
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_enumSetPinDirection+0x112>
 314:	66 0f       	add	r22, r22
 316:	77 1f       	adc	r23, r23
 318:	8a 95       	dec	r24
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_enumSetPinDirection+0x10e>
 31c:	cb 01       	movw	r24, r22
 31e:	80 95       	com	r24
 320:	84 23       	and	r24, r20
 322:	81 bb       	out	0x11, r24	; 17
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	08 95       	ret
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	08 95       	ret
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	08 95       	ret
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	08 95       	ret
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	08 95       	ret
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret

00000340 <DIO_enumSetPinValue>:
 340:	88 30       	cpi	r24, 0x08	; 8
 342:	08 f0       	brcs	.+2      	; 0x346 <DIO_enumSetPinValue+0x6>
 344:	8e c0       	rjmp	.+284    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 346:	61 30       	cpi	r22, 0x01	; 1
 348:	49 f1       	breq	.+82     	; 0x39c <DIO_enumSetPinValue+0x5c>
 34a:	38 f0       	brcs	.+14     	; 0x35a <DIO_enumSetPinValue+0x1a>
 34c:	62 30       	cpi	r22, 0x02	; 2
 34e:	09 f4       	brne	.+2      	; 0x352 <DIO_enumSetPinValue+0x12>
 350:	46 c0       	rjmp	.+140    	; 0x3de <DIO_enumSetPinValue+0x9e>
 352:	63 30       	cpi	r22, 0x03	; 3
 354:	09 f4       	brne	.+2      	; 0x358 <DIO_enumSetPinValue+0x18>
 356:	64 c0       	rjmp	.+200    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 358:	86 c0       	rjmp	.+268    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 35a:	41 30       	cpi	r20, 0x01	; 1
 35c:	71 f4       	brne	.+28     	; 0x37a <DIO_enumSetPinValue+0x3a>
 35e:	4b b3       	in	r20, 0x1b	; 27
 360:	21 e0       	ldi	r18, 0x01	; 1
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	b9 01       	movw	r22, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_enumSetPinValue+0x2c>
 368:	66 0f       	add	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	8a 95       	dec	r24
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_enumSetPinValue+0x28>
 370:	cb 01       	movw	r24, r22
 372:	84 2b       	or	r24, r20
 374:	8b bb       	out	0x1b, r24	; 27
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret
 37a:	41 11       	cpse	r20, r1
 37c:	76 c0       	rjmp	.+236    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 37e:	4b b3       	in	r20, 0x1b	; 27
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	b9 01       	movw	r22, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_enumSetPinValue+0x4c>
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	8a 95       	dec	r24
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_enumSetPinValue+0x48>
 390:	cb 01       	movw	r24, r22
 392:	80 95       	com	r24
 394:	84 23       	and	r24, r20
 396:	8b bb       	out	0x1b, r24	; 27
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	08 95       	ret
 39c:	41 30       	cpi	r20, 0x01	; 1
 39e:	71 f4       	brne	.+28     	; 0x3bc <DIO_enumSetPinValue+0x7c>
 3a0:	48 b3       	in	r20, 0x18	; 24
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	b9 01       	movw	r22, r18
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_enumSetPinValue+0x6e>
 3aa:	66 0f       	add	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	8a 95       	dec	r24
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_enumSetPinValue+0x6a>
 3b2:	cb 01       	movw	r24, r22
 3b4:	84 2b       	or	r24, r20
 3b6:	88 bb       	out	0x18, r24	; 24
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	08 95       	ret
 3bc:	41 11       	cpse	r20, r1
 3be:	57 c0       	rjmp	.+174    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 3c0:	48 b3       	in	r20, 0x18	; 24
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	b9 01       	movw	r22, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_enumSetPinValue+0x8e>
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	8a 95       	dec	r24
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_enumSetPinValue+0x8a>
 3d2:	cb 01       	movw	r24, r22
 3d4:	80 95       	com	r24
 3d6:	84 23       	and	r24, r20
 3d8:	88 bb       	out	0x18, r24	; 24
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret
 3de:	41 30       	cpi	r20, 0x01	; 1
 3e0:	71 f4       	brne	.+28     	; 0x3fe <DIO_enumSetPinValue+0xbe>
 3e2:	45 b3       	in	r20, 0x15	; 21
 3e4:	21 e0       	ldi	r18, 0x01	; 1
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	b9 01       	movw	r22, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_enumSetPinValue+0xb0>
 3ec:	66 0f       	add	r22, r22
 3ee:	77 1f       	adc	r23, r23
 3f0:	8a 95       	dec	r24
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_enumSetPinValue+0xac>
 3f4:	cb 01       	movw	r24, r22
 3f6:	84 2b       	or	r24, r20
 3f8:	85 bb       	out	0x15, r24	; 21
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret
 3fe:	41 11       	cpse	r20, r1
 400:	38 c0       	rjmp	.+112    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 402:	45 b3       	in	r20, 0x15	; 21
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	b9 01       	movw	r22, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	66 0f       	add	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	8a 95       	dec	r24
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	cb 01       	movw	r24, r22
 416:	80 95       	com	r24
 418:	84 23       	and	r24, r20
 41a:	85 bb       	out	0x15, r24	; 21
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	08 95       	ret
 420:	41 30       	cpi	r20, 0x01	; 1
 422:	71 f4       	brne	.+28     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 424:	42 b3       	in	r20, 0x12	; 18
 426:	21 e0       	ldi	r18, 0x01	; 1
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	b9 01       	movw	r22, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	8a 95       	dec	r24
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	cb 01       	movw	r24, r22
 438:	84 2b       	or	r24, r20
 43a:	82 bb       	out	0x12, r24	; 18
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret
 440:	41 11       	cpse	r20, r1
 442:	19 c0       	rjmp	.+50     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 444:	42 b3       	in	r20, 0x12	; 18
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	b9 01       	movw	r22, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	8a 95       	dec	r24
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	cb 01       	movw	r24, r22
 458:	80 95       	com	r24
 45a:	84 23       	and	r24, r20
 45c:	82 bb       	out	0x12, r24	; 18
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	08 95       	ret
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	08 95       	ret
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	08 95       	ret
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	08 95       	ret
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	08 95       	ret
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	08 95       	ret
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	08 95       	ret

0000047a <DIO_enumGetPinValue>:
DIO_ErorrStatues DIO_enumGetPinValue(U8 copy_u8PortName,U8 copy_u8PinNumber,U8* copy_u8Ptr){
	DIO_ErorrStatues LOC_enumState;
	LOC_enumState=ok_state;
	if(( copy_u8PinNumber>=DIO_PIN0)&&( copy_u8PinNumber<=DIO_PIN7)){
 47a:	68 30       	cpi	r22, 0x08	; 8
 47c:	c0 f5       	brcc	.+112    	; 0x4ee <DIO_enumGetPinValue+0x74>
		switch(copy_u8PortName){
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	91 f0       	breq	.+36     	; 0x4a6 <DIO_enumGetPinValue+0x2c>
 482:	28 f0       	brcs	.+10     	; 0x48e <DIO_enumGetPinValue+0x14>
 484:	82 30       	cpi	r24, 0x02	; 2
 486:	d9 f0       	breq	.+54     	; 0x4be <DIO_enumGetPinValue+0x44>
 488:	83 30       	cpi	r24, 0x03	; 3
 48a:	29 f1       	breq	.+74     	; 0x4d6 <DIO_enumGetPinValue+0x5c>
 48c:	32 c0       	rjmp	.+100    	; 0x4f2 <DIO_enumGetPinValue+0x78>
		case DIO_PORTA:
			*copy_u8Ptr=GET_BIT(PINA_Reg, copy_u8PinNumber);
 48e:	89 b3       	in	r24, 0x19	; 25
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_enumGetPinValue+0x1e>
 494:	95 95       	asr	r25
 496:	87 95       	ror	r24
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_enumGetPinValue+0x1a>
 49c:	81 70       	andi	r24, 0x01	; 1
 49e:	fa 01       	movw	r30, r20
 4a0:	80 83       	st	Z, r24
	}
	return LOC_enumState;
}
DIO_ErorrStatues DIO_enumGetPinValue(U8 copy_u8PortName,U8 copy_u8PinNumber,U8* copy_u8Ptr){
	DIO_ErorrStatues LOC_enumState;
	LOC_enumState=ok_state;
 4a2:	80 e0       	ldi	r24, 0x00	; 0
	if(( copy_u8PinNumber>=DIO_PIN0)&&( copy_u8PinNumber<=DIO_PIN7)){
		switch(copy_u8PortName){
		case DIO_PORTA:
			*copy_u8Ptr=GET_BIT(PINA_Reg, copy_u8PinNumber);
			break;
 4a4:	08 95       	ret
		case DIO_PORTB:
			*copy_u8Ptr=GET_BIT(PINB_Reg, copy_u8PinNumber);
 4a6:	86 b3       	in	r24, 0x16	; 22
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_enumGetPinValue+0x36>
 4ac:	95 95       	asr	r25
 4ae:	87 95       	ror	r24
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_enumGetPinValue+0x32>
 4b4:	81 70       	andi	r24, 0x01	; 1
 4b6:	fa 01       	movw	r30, r20
 4b8:	80 83       	st	Z, r24
	}
	return LOC_enumState;
}
DIO_ErorrStatues DIO_enumGetPinValue(U8 copy_u8PortName,U8 copy_u8PinNumber,U8* copy_u8Ptr){
	DIO_ErorrStatues LOC_enumState;
	LOC_enumState=ok_state;
 4ba:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTA:
			*copy_u8Ptr=GET_BIT(PINA_Reg, copy_u8PinNumber);
			break;
		case DIO_PORTB:
			*copy_u8Ptr=GET_BIT(PINB_Reg, copy_u8PinNumber);
			break;
 4bc:	08 95       	ret
		case DIO_PORTC:
			*copy_u8Ptr=GET_BIT(PINC_Reg, copy_u8PinNumber);
 4be:	83 b3       	in	r24, 0x13	; 19
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_enumGetPinValue+0x4e>
 4c4:	95 95       	asr	r25
 4c6:	87 95       	ror	r24
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_enumGetPinValue+0x4a>
 4cc:	81 70       	andi	r24, 0x01	; 1
 4ce:	fa 01       	movw	r30, r20
 4d0:	80 83       	st	Z, r24
	}
	return LOC_enumState;
}
DIO_ErorrStatues DIO_enumGetPinValue(U8 copy_u8PortName,U8 copy_u8PinNumber,U8* copy_u8Ptr){
	DIO_ErorrStatues LOC_enumState;
	LOC_enumState=ok_state;
 4d2:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTB:
			*copy_u8Ptr=GET_BIT(PINB_Reg, copy_u8PinNumber);
			break;
		case DIO_PORTC:
			*copy_u8Ptr=GET_BIT(PINC_Reg, copy_u8PinNumber);
			break;
 4d4:	08 95       	ret
		case DIO_PORTD:
			*copy_u8Ptr=GET_BIT(PIND_Reg, copy_u8PinNumber);
 4d6:	80 b3       	in	r24, 0x10	; 16
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_enumGetPinValue+0x66>
 4dc:	95 95       	asr	r25
 4de:	87 95       	ror	r24
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_enumGetPinValue+0x62>
 4e4:	81 70       	andi	r24, 0x01	; 1
 4e6:	fa 01       	movw	r30, r20
 4e8:	80 83       	st	Z, r24
	}
	return LOC_enumState;
}
DIO_ErorrStatues DIO_enumGetPinValue(U8 copy_u8PortName,U8 copy_u8PinNumber,U8* copy_u8Ptr){
	DIO_ErorrStatues LOC_enumState;
	LOC_enumState=ok_state;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTC:
			*copy_u8Ptr=GET_BIT(PINC_Reg, copy_u8PinNumber);
			break;
		case DIO_PORTD:
			*copy_u8Ptr=GET_BIT(PIND_Reg, copy_u8PinNumber);
			break;
 4ec:	08 95       	ret
		default:
			LOC_enumState=dok_state;
			break;
		}
	}else{
		LOC_enumState=dok_state;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	08 95       	ret
			break;
		case DIO_PORTD:
			*copy_u8Ptr=GET_BIT(PIND_Reg, copy_u8PinNumber);
			break;
		default:
			LOC_enumState=dok_state;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}else{
		LOC_enumState=dok_state;
	}
	return LOC_enumState;
}
 4f4:	08 95       	ret

000004f6 <Kypad_init>:
                 ,{'4','5','6','*'}//r1
                 ,{'1','2','3','-'}//r2
                 ,{'c','0','=','+'}/*r3*/};

void Kypad_init(void)
{
 4f6:	cf 93       	push	r28
	for(U8 i=0;i<4;i++)
 4f8:	c0 e0       	ldi	r28, 0x00	; 0
 4fa:	07 c0       	rjmp	.+14     	; 0x50a <Kypad_init+0x14>
	{
		/*SET Direction of col----->input*/
		DIO_enumSetPinDirection(FIRSTCOL+i,DIO_PORTD,DIO_INPUT);
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	63 e0       	ldi	r22, 0x03	; 3
 500:	84 e0       	ldi	r24, 0x04	; 4
 502:	8c 0f       	add	r24, r28
 504:	0e 94 03 01 	call	0x206	; 0x206 <DIO_enumSetPinDirection>
                 ,{'1','2','3','-'}//r2
                 ,{'c','0','=','+'}/*r3*/};

void Kypad_init(void)
{
	for(U8 i=0;i<4;i++)
 508:	cf 5f       	subi	r28, 0xFF	; 255
 50a:	c4 30       	cpi	r28, 0x04	; 4
 50c:	b8 f3       	brcs	.-18     	; 0x4fc <Kypad_init+0x6>
 50e:	c0 e0       	ldi	r28, 0x00	; 0
 510:	06 c0       	rjmp	.+12     	; 0x51e <Kypad_init+0x28>
		DIO_enumSetPinDirection(FIRSTCOL+i,DIO_PORTD,DIO_INPUT);
	}
	for(U8 i=0;i<4;i++)
	{
		/*Set Direction of RW------->output*/
		DIO_enumSetPinDirection(FIRSTRW+i,DIO_PORTD,DIO_OUTPUT);
 512:	41 e0       	ldi	r20, 0x01	; 1
 514:	63 e0       	ldi	r22, 0x03	; 3
 516:	8c 2f       	mov	r24, r28
 518:	0e 94 03 01 	call	0x206	; 0x206 <DIO_enumSetPinDirection>
	for(U8 i=0;i<4;i++)
	{
		/*SET Direction of col----->input*/
		DIO_enumSetPinDirection(FIRSTCOL+i,DIO_PORTD,DIO_INPUT);
	}
	for(U8 i=0;i<4;i++)
 51c:	cf 5f       	subi	r28, 0xFF	; 255
 51e:	c4 30       	cpi	r28, 0x04	; 4
 520:	c0 f3       	brcs	.-16     	; 0x512 <Kypad_init+0x1c>
 522:	c0 e0       	ldi	r28, 0x00	; 0
 524:	06 c0       	rjmp	.+12     	; 0x532 <Kypad_init+0x3c>
		DIO_enumSetPinDirection(FIRSTRW+i,DIO_PORTD,DIO_OUTPUT);
	}
	for(U8 i=0;i<4;i++)
	{
		/*SET Values of RW------->1*/
		DIO_enumSetPinValue(FIRSTRW+i,DIO_PORTD,DIO_HIGH);
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	63 e0       	ldi	r22, 0x03	; 3
 52a:	8c 2f       	mov	r24, r28
 52c:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>
	for(U8 i=0;i<4;i++)
	{
		/*Set Direction of RW------->output*/
		DIO_enumSetPinDirection(FIRSTRW+i,DIO_PORTD,DIO_OUTPUT);
	}
	for(U8 i=0;i<4;i++)
 530:	cf 5f       	subi	r28, 0xFF	; 255
 532:	c4 30       	cpi	r28, 0x04	; 4
 534:	c0 f3       	brcs	.-16     	; 0x526 <Kypad_init+0x30>
 536:	c0 e0       	ldi	r28, 0x00	; 0
 538:	07 c0       	rjmp	.+14     	; 0x548 <Kypad_init+0x52>
		DIO_enumSetPinValue(FIRSTRW+i,DIO_PORTD,DIO_HIGH);
	}
	for(U8 i=0;i<4;i++)
	{
		/*SET Values of COL------->Pull UP*/
		DIO_enumSetPinValue(FIRSTCOL+i,DIO_PORTD,DIO_HIGH);
 53a:	41 e0       	ldi	r20, 0x01	; 1
 53c:	63 e0       	ldi	r22, 0x03	; 3
 53e:	84 e0       	ldi	r24, 0x04	; 4
 540:	8c 0f       	add	r24, r28
 542:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>
	for(U8 i=0;i<4;i++)
	{
		/*SET Values of RW------->1*/
		DIO_enumSetPinValue(FIRSTRW+i,DIO_PORTD,DIO_HIGH);
	}
	for(U8 i=0;i<4;i++)
 546:	cf 5f       	subi	r28, 0xFF	; 255
 548:	c4 30       	cpi	r28, 0x04	; 4
 54a:	b8 f3       	brcs	.-18     	; 0x53a <Kypad_init+0x44>
	{
		/*SET Values of COL------->Pull UP*/
		DIO_enumSetPinValue(FIRSTCOL+i,DIO_PORTD,DIO_HIGH);
	}

}
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <Kypad_GetKey>:
/*set any switch pressed&return this sw&loop 16 sw*/
U8   Kypad_GetKey(void)
{
 550:	ff 92       	push	r15
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	1f 92       	push	r1
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
   U8 COLITERATION=0;
   U8 RWITERATION=0;
   U8 RETURN_VAL='f';
 560:	0f 2e       	mov	r0, r31
 562:	f6 e6       	ldi	r31, 0x66	; 102
 564:	ff 2e       	mov	r15, r31
 566:	f0 2d       	mov	r31, r0
   U8 KEY_VAL;
   for(RWITERATION=0;RWITERATION<4;RWITERATION++)
 568:	00 e0       	ldi	r16, 0x00	; 0
 56a:	34 c0       	rjmp	.+104    	; 0x5d4 <Kypad_GetKey+0x84>
   {
	   DIO_enumSetPinValue(RWITERATION,DIO_PORTD,DIO_LOW);
 56c:	40 e0       	ldi	r20, 0x00	; 0
 56e:	63 e0       	ldi	r22, 0x03	; 3
 570:	80 2f       	mov	r24, r16
 572:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>

       for(COLITERATION=4;COLITERATION<8;COLITERATION++)
 576:	14 e0       	ldi	r17, 0x04	; 4
 578:	25 c0       	rjmp	.+74     	; 0x5c4 <Kypad_GetKey+0x74>
       {

    	   DIO_enumGetPinValue(DIO_PORTD,COLITERATION,&KEY_VAL);/*DIO GET PIN VALUE*/
 57a:	ae 01       	movw	r20, r28
 57c:	4f 5f       	subi	r20, 0xFF	; 255
 57e:	5f 4f       	sbci	r21, 0xFF	; 255
 580:	61 2f       	mov	r22, r17
 582:	83 e0       	ldi	r24, 0x03	; 3
 584:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_enumGetPinValue>
    	   if(KEY_VAL==0)
 588:	89 81       	ldd	r24, Y+1	; 0x01
 58a:	81 11       	cpse	r24, r1
 58c:	10 c0       	rjmp	.+32     	; 0x5ae <Kypad_GetKey+0x5e>
    	   {
    		   RETURN_VAL=Key_arr[RWITERATION][COLITERATION-4];
 58e:	80 2f       	mov	r24, r16
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	21 2f       	mov	r18, r17
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	24 50       	subi	r18, 0x04	; 4
 598:	31 09       	sbc	r19, r1
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	80 5a       	subi	r24, 0xA0	; 160
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	fc 01       	movw	r30, r24
 5a8:	e2 0f       	add	r30, r18
 5aa:	f3 1f       	adc	r31, r19
 5ac:	f0 80       	ld	r15, Z
    	   }

    	   while(GET_BIT(PIND_Reg,COLITERATION)==0);
 5ae:	80 b3       	in	r24, 0x10	; 16
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	01 2e       	mov	r0, r17
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <Kypad_GetKey+0x6a>
 5b6:	95 95       	asr	r25
 5b8:	87 95       	ror	r24
 5ba:	0a 94       	dec	r0
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <Kypad_GetKey+0x66>
 5be:	80 ff       	sbrs	r24, 0
 5c0:	f6 cf       	rjmp	.-20     	; 0x5ae <Kypad_GetKey+0x5e>
   U8 KEY_VAL;
   for(RWITERATION=0;RWITERATION<4;RWITERATION++)
   {
	   DIO_enumSetPinValue(RWITERATION,DIO_PORTD,DIO_LOW);

       for(COLITERATION=4;COLITERATION<8;COLITERATION++)
 5c2:	1f 5f       	subi	r17, 0xFF	; 255
 5c4:	18 30       	cpi	r17, 0x08	; 8
 5c6:	c8 f2       	brcs	.-78     	; 0x57a <Kypad_GetKey+0x2a>
    		   RETURN_VAL=Key_arr[RWITERATION][COLITERATION-4];
    	   }

    	   while(GET_BIT(PIND_Reg,COLITERATION)==0);
       }
       DIO_enumSetPinValue(RWITERATION,DIO_PORTD,DIO_HIGH);
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	63 e0       	ldi	r22, 0x03	; 3
 5cc:	80 2f       	mov	r24, r16
 5ce:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>
{
   U8 COLITERATION=0;
   U8 RWITERATION=0;
   U8 RETURN_VAL='f';
   U8 KEY_VAL;
   for(RWITERATION=0;RWITERATION<4;RWITERATION++)
 5d2:	0f 5f       	subi	r16, 0xFF	; 255
 5d4:	04 30       	cpi	r16, 0x04	; 4
 5d6:	50 f2       	brcs	.-108    	; 0x56c <Kypad_GetKey+0x1c>
   }


return RETURN_VAL;

}
 5d8:	8f 2d       	mov	r24, r15
 5da:	0f 90       	pop	r0
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	0f 91       	pop	r16
 5e4:	ff 90       	pop	r15
 5e6:	08 95       	ret

000005e8 <main>:
#include "Kypd.h"
#include <util/delay.h>
#include <avr/io.h>

int main(void)
{
 5e8:	ef 92       	push	r14
 5ea:	ff 92       	push	r15
 5ec:	0f 93       	push	r16
 5ee:	1f 93       	push	r17
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
	U8 s1,s2,id11,flag=0,i=0;
		U8 id1, pass1;
		U8 count=0;
		U8 *str3 = "Enter your pass:";
		U8 *str6 = "System Closed";
	DIO_enumSetPinDirection(DIO_PIN3,DIO_PORTA,DIO_OUTPUT);
 5f4:	41 e0       	ldi	r20, 0x01	; 1
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	83 e0       	ldi	r24, 0x03	; 3
 5fa:	0e 94 03 01 	call	0x206	; 0x206 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(DIO_PIN4,DIO_PORTA,DIO_OUTPUT);
 5fe:	41 e0       	ldi	r20, 0x01	; 1
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	84 e0       	ldi	r24, 0x04	; 4
 604:	0e 94 03 01 	call	0x206	; 0x206 <DIO_enumSetPinDirection>
	
	CLCD_init();
 608:	0e 94 64 00 	call	0xc8	; 0xc8 <CLCD_init>
	Kypad_init();
 60c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Kypad_init>

	while (1)
	{
		
		
		CLCD_CLR();     
 610:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CLCD_CLR>
		CLCD_WriteChar(" ");    
 614:	0f 2e       	mov	r0, r31
 616:	f0 e7       	ldi	r31, 0x70	; 112
 618:	ef 2e       	mov	r14, r31
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	ff 2e       	mov	r15, r31
 61e:	f0 2d       	mov	r31, r0
 620:	1e 2d       	mov	r17, r14
 622:	8e 2d       	mov	r24, r14
 624:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
		U8 *str1 = "Welcome";  
		CLCD_GoTo(0, 0);       
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
		CLCD_SendString(str1); 
 630:	82 e7       	ldi	r24, 0x72	; 114
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 638:	2f e3       	ldi	r18, 0x3F	; 63
 63a:	82 e4       	ldi	r24, 0x42	; 66
 63c:	9f e0       	ldi	r25, 0x0F	; 15
 63e:	21 50       	subi	r18, 0x01	; 1
 640:	80 40       	sbci	r24, 0x00	; 0
 642:	90 40       	sbci	r25, 0x00	; 0
 644:	e1 f7       	brne	.-8      	; 0x63e <main+0x56>
 646:	00 c0       	rjmp	.+0      	; 0x648 <main+0x60>
 648:	00 00       	nop
		_delay_ms(5000);       

		
		CLCD_CLR();         
 64a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CLCD_CLR>
		U8 *str2 = "Enter Your ID:";  
		CLCD_GoTo(0, 0);    
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
		CLCD_WriteChar(" ");    
 656:	8e 2d       	mov	r24, r14
 658:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
		CLCD_SendString(str2); 
 65c:	8a e7       	ldi	r24, 0x7A	; 122
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
	
		
		while (1)
		{
		
            id1 = Kypad_GetKey();
 664:	0e 94 a8 02 	call	0x550	; 0x550 <Kypad_GetKey>
 668:	c8 2f       	mov	r28, r24
			if (id1 != 'f') 
 66a:	86 36       	cpi	r24, 0x66	; 102
 66c:	d9 f3       	breq	.-10     	; 0x664 <main+0x7c>
			{
				
				CLCD_GoTo(1, 0);      
 66e:	60 e0       	ldi	r22, 0x00	; 0
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
				
				CLCD_WriteChar(id1); 
 676:	8c 2f       	mov	r24, r28
 678:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
				CLCD_CLR();  
 67c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CLCD_CLR>
 680:	2f e3       	ldi	r18, 0x3F	; 63
 682:	82 e4       	ldi	r24, 0x42	; 66
 684:	9f e0       	ldi	r25, 0x0F	; 15
 686:	21 50       	subi	r18, 0x01	; 1
 688:	80 40       	sbci	r24, 0x00	; 0
 68a:	90 40       	sbci	r25, 0x00	; 0
 68c:	e1 f7       	brne	.-8      	; 0x686 <main+0x9e>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <main+0xa8>
 690:	00 00       	nop
				_delay_ms(5000);

				
				if (id1 == '5' || id1 == '7')
 692:	c5 33       	cpi	r28, 0x35	; 53
 694:	11 f0       	breq	.+4      	; 0x69a <main+0xb2>
 696:	c7 33       	cpi	r28, 0x37	; 55
 698:	a1 f4       	brne	.+40     	; 0x6c2 <main+0xda>
				{
					id11=id1,
					CLCD_CLR(); 
 69a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CLCD_CLR>
					CLCD_WriteChar(" ");
 69e:	8e 2d       	mov	r24, r14
 6a0:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
					CLCD_SendString(str3);
 6a4:	89 e8       	ldi	r24, 0x89	; 137
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
 6ac:	2f e7       	ldi	r18, 0x7F	; 127
 6ae:	8a e1       	ldi	r24, 0x1A	; 26
 6b0:	96 e0       	ldi	r25, 0x06	; 6
 6b2:	21 50       	subi	r18, 0x01	; 1
 6b4:	80 40       	sbci	r24, 0x00	; 0
 6b6:	90 40       	sbci	r25, 0x00	; 0
 6b8:	e1 f7       	brne	.-8      	; 0x6b2 <main+0xca>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <main+0xd4>
 6bc:	00 00       	nop
				
			}
			
			
		
	U8 count = 0;  
 6be:	d0 e0       	ldi	r29, 0x00	; 0
	while (count < 3) 
 6c0:	6b c0       	rjmp	.+214    	; 0x798 <main+0x1b0>
					
					break;
				}
					else
					{
						CLCD_CLR();
 6c2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CLCD_CLR>
						CLCD_WriteChar(" ");
 6c6:	81 2f       	mov	r24, r17
 6c8:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
						CLCD_SendString(str6);  
 6cc:	8a e9       	ldi	r24, 0x9A	; 154
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
 6d4:	2f e3       	ldi	r18, 0x3F	; 63
 6d6:	82 e4       	ldi	r24, 0x42	; 66
 6d8:	9f e0       	ldi	r25, 0x0F	; 15
 6da:	21 50       	subi	r18, 0x01	; 1
 6dc:	80 40       	sbci	r24, 0x00	; 0
 6de:	90 40       	sbci	r25, 0x00	; 0
 6e0:	e1 f7       	brne	.-8      	; 0x6da <main+0xf2>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <main+0xfc>
 6e4:	00 00       	nop
 6e6:	be cf       	rjmp	.-132    	; 0x664 <main+0x7c>
			
		
	U8 count = 0;  
	while (count < 3) 
	{
		pass1 = Kypad_GetKey();
 6e8:	0e 94 a8 02 	call	0x550	; 0x550 <Kypad_GetKey>
 6ec:	08 2f       	mov	r16, r24
		if (pass1 != 'f')  
 6ee:	86 36       	cpi	r24, 0x66	; 102
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <main+0x10c>
 6f2:	52 c0       	rjmp	.+164    	; 0x798 <main+0x1b0>
		{
			CLCD_GoTo(1, 0);      
 6f4:	60 e0       	ldi	r22, 0x00	; 0
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
			CLCD_CLR();
 6fc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CLCD_CLR>
			CLCD_WriteChar(pass1);   
 700:	80 2f       	mov	r24, r16
 702:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
 706:	2f e3       	ldi	r18, 0x3F	; 63
 708:	82 e4       	ldi	r24, 0x42	; 66
 70a:	9f e0       	ldi	r25, 0x0F	; 15
 70c:	21 50       	subi	r18, 0x01	; 1
 70e:	80 40       	sbci	r24, 0x00	; 0
 710:	90 40       	sbci	r25, 0x00	; 0
 712:	e1 f7       	brne	.-8      	; 0x70c <main+0x124>
 714:	00 c0       	rjmp	.+0      	; 0x716 <main+0x12e>
 716:	00 00       	nop
			_delay_ms(5000);

			
			if ((pass1 == '6' && id11 == '5') || (pass1 == '8' && id11 == '7'))
 718:	06 33       	cpi	r16, 0x36	; 54
 71a:	11 f4       	brne	.+4      	; 0x720 <main+0x138>
 71c:	c5 33       	cpi	r28, 0x35	; 53
 71e:	21 f0       	breq	.+8      	; 0x728 <main+0x140>
 720:	08 33       	cpi	r16, 0x38	; 56
 722:	21 f5       	brne	.+72     	; 0x76c <main+0x184>
 724:	c7 33       	cpi	r28, 0x37	; 55
 726:	11 f5       	brne	.+68     	; 0x76c <main+0x184>
			{
				CLCD_CLR();
 728:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CLCD_CLR>
				CLCD_GoTo(0, 0);
 72c:	60 e0       	ldi	r22, 0x00	; 0
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
				CLCD_WriteChar(" ");
 734:	8e 2d       	mov	r24, r14
 736:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
				U8 *str4 = "1-Room1";
				U8 *str5 = "2-Room2";
				CLCD_SendString(str4);
 73a:	88 ea       	ldi	r24, 0xA8	; 168
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
				CLCD_GoTo(2, 0);
 742:	60 e0       	ldi	r22, 0x00	; 0
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
				CLCD_WriteChar(',');
 74a:	8c e2       	ldi	r24, 0x2C	; 44
 74c:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
				CLCD_SendString(str5);
 750:	80 eb       	ldi	r24, 0xB0	; 176
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
 758:	2f e7       	ldi	r18, 0x7F	; 127
 75a:	8a e1       	ldi	r24, 0x1A	; 26
 75c:	96 e0       	ldi	r25, 0x06	; 6
 75e:	21 50       	subi	r18, 0x01	; 1
 760:	80 40       	sbci	r24, 0x00	; 0
 762:	90 40       	sbci	r25, 0x00	; 0
 764:	e1 f7       	brne	.-8      	; 0x75e <main+0x176>
 766:	00 c0       	rjmp	.+0      	; 0x768 <main+0x180>
 768:	00 00       	nop
 76a:	19 c0       	rjmp	.+50     	; 0x79e <main+0x1b6>
				_delay_ms(2000);
				break;
			}
			else
			{
				count++;  
 76c:	df 5f       	subi	r29, 0xFF	; 255
				if (count < 3)  
 76e:	d3 30       	cpi	r29, 0x03	; 3
 770:	08 f0       	brcs	.+2      	; 0x774 <main+0x18c>
 772:	c4 c0       	rjmp	.+392    	; 0x8fc <__stack+0x9d>
				{
					CLCD_CLR();
 774:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CLCD_CLR>
					CLCD_WriteChar(" ");
 778:	81 2f       	mov	r24, r17
 77a:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
					
					CLCD_SendString(str3);
 77e:	89 e8       	ldi	r24, 0x89	; 137
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
 786:	2f e7       	ldi	r18, 0x7F	; 127
 788:	8a e1       	ldi	r24, 0x1A	; 26
 78a:	96 e0       	ldi	r25, 0x06	; 6
 78c:	21 50       	subi	r18, 0x01	; 1
 78e:	80 40       	sbci	r24, 0x00	; 0
 790:	90 40       	sbci	r25, 0x00	; 0
 792:	e1 f7       	brne	.-8      	; 0x78c <main+0x1a4>
 794:	00 c0       	rjmp	.+0      	; 0x796 <main+0x1ae>
 796:	00 00       	nop
			}
			
			
		
	U8 count = 0;  
	while (count < 3) 
 798:	d3 30       	cpi	r29, 0x03	; 3
 79a:	08 f4       	brcc	.+2      	; 0x79e <main+0x1b6>
 79c:	a5 cf       	rjmp	.-182    	; 0x6e8 <main+0x100>

	
		
			while(1)
			{
				U8 ch=Kypad_GetKey();
 79e:	0e 94 a8 02 	call	0x550	; 0x550 <Kypad_GetKey>
				U8 *str7 = "1-Led";
				U8 *str8 = "2-Fan";
				U8 x=',';
				if (ch!='f')
 7a2:	86 36       	cpi	r24, 0x66	; 102
 7a4:	e1 f3       	breq	.-8      	; 0x79e <main+0x1b6>
				{
					if(ch=='1'||ch=='2')
 7a6:	9f ec       	ldi	r25, 0xCF	; 207
 7a8:	98 0f       	add	r25, r24
 7aa:	92 30       	cpi	r25, 0x02	; 2
 7ac:	c0 f7       	brcc	.-16     	; 0x79e <main+0x1b6>
					{
						
						
						CLCD_WriteChar(ch);
 7ae:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
						CLCD_CLR();
 7b2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CLCD_CLR>
						CLCD_GoTo(0,0);
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
						CLCD_WriteChar(" ");
 7be:	8e 2d       	mov	r24, r14
 7c0:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
						CLCD_SendString(str7);
 7c4:	88 eb       	ldi	r24, 0xB8	; 184
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
						CLCD_GoTo(2,0);
 7cc:	60 e0       	ldi	r22, 0x00	; 0
 7ce:	82 e0       	ldi	r24, 0x02	; 2
 7d0:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
						CLCD_WriteChar(x);
 7d4:	8c e2       	ldi	r24, 0x2C	; 44
 7d6:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
						CLCD_SendString(str8);
 7da:	8e eb       	ldi	r24, 0xBE	; 190
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
 7e2:	2f e7       	ldi	r18, 0x7F	; 127
 7e4:	8a e1       	ldi	r24, 0x1A	; 26
 7e6:	96 e0       	ldi	r25, 0x06	; 6
 7e8:	21 50       	subi	r18, 0x01	; 1
 7ea:	80 40       	sbci	r24, 0x00	; 0
 7ec:	90 40       	sbci	r25, 0x00	; 0
 7ee:	e1 f7       	brne	.-8      	; 0x7e8 <main+0x200>
 7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <main+0x20a>
 7f2:	00 00       	nop
				}
				
			}
			while(1)
			{
				U8 ch1=Kypad_GetKey();
 7f4:	0e 94 a8 02 	call	0x550	; 0x550 <Kypad_GetKey>
 7f8:	d8 2f       	mov	r29, r24
				U8 *str7 = "1-ON";
				U8 *str8 = "2-OFF";
				U8 x=',';
				if (ch1!='f')
 7fa:	86 36       	cpi	r24, 0x66	; 102
 7fc:	d9 f3       	breq	.-10     	; 0x7f4 <main+0x20c>
				{
					if(ch1=='1'||ch1=='2')
 7fe:	8f ec       	ldi	r24, 0xCF	; 207
 800:	8d 0f       	add	r24, r29
 802:	82 30       	cpi	r24, 0x02	; 2
 804:	b8 f7       	brcc	.-18     	; 0x7f4 <main+0x20c>
					{
						
						
						CLCD_WriteChar(ch1);
 806:	8d 2f       	mov	r24, r29
 808:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
						CLCD_CLR();
 80c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CLCD_CLR>
						CLCD_GoTo(0,0);
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
						CLCD_WriteChar(" ");
 818:	8e 2d       	mov	r24, r14
 81a:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
						CLCD_SendString(str7);
 81e:	84 ec       	ldi	r24, 0xC4	; 196
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
						CLCD_GoTo(4,0);
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	84 e0       	ldi	r24, 0x04	; 4
 82a:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
						CLCD_WriteChar(x);
 82e:	8c e2       	ldi	r24, 0x2C	; 44
 830:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
						CLCD_SendString(str8);
 834:	89 ec       	ldi	r24, 0xC9	; 201
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
 83c:	2f e7       	ldi	r18, 0x7F	; 127
 83e:	8a e1       	ldi	r24, 0x1A	; 26
 840:	96 e0       	ldi	r25, 0x06	; 6
 842:	21 50       	subi	r18, 0x01	; 1
 844:	80 40       	sbci	r24, 0x00	; 0
 846:	90 40       	sbci	r25, 0x00	; 0
 848:	e1 f7       	brne	.-8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 84a:	00 c0       	rjmp	.+0      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 84c:	00 00       	nop
				}
				
			}
				while(1)
				{
					U8 ch1=Kypad_GetKey();
 84e:	0e 94 a8 02 	call	0x550	; 0x550 <Kypad_GetKey>
 852:	c8 2f       	mov	r28, r24
					U8 *str11="Led ON";
					U8 *str12="Led OFF";
					U8 *str13="Fan ON";
					U8 *str14="Fan OFF";
					U8 x=',';
					if (ch1!='f')
 854:	86 36       	cpi	r24, 0x66	; 102
 856:	d9 f3       	breq	.-10     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
					{
						CLCD_CLR();
 858:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CLCD_CLR>
						if(s1=='1'&&ch1=='1')
 85c:	d1 33       	cpi	r29, 0x31	; 49
 85e:	99 f4       	brne	.+38     	; 0x886 <__stack+0x27>
 860:	c1 33       	cpi	r28, 0x31	; 49
 862:	89 f4       	brne	.+34     	; 0x886 <__stack+0x27>
						{
							CLCD_GoTo(0,0);
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
							CLCD_WriteChar(" ");
 86c:	81 2f       	mov	r24, r17
 86e:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
							CLCD_SendString(str11);
 872:	8f ec       	ldi	r24, 0xCF	; 207
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
							DIO_enumSetPinValue(DIO_PIN3,DIO_PORTA,DIO_HIGH);
 87a:	41 e0       	ldi	r20, 0x01	; 1
 87c:	60 e0       	ldi	r22, 0x00	; 0
 87e:	83 e0       	ldi	r24, 0x03	; 3
 880:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>
 884:	e4 cf       	rjmp	.-56     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
						}
						else if(s1=='1'&&ch1=='2')
 886:	d1 33       	cpi	r29, 0x31	; 49
 888:	99 f4       	brne	.+38     	; 0x8b0 <__stack+0x51>
 88a:	c2 33       	cpi	r28, 0x32	; 50
 88c:	89 f4       	brne	.+34     	; 0x8b0 <__stack+0x51>
						{
							CLCD_GoTo(0,0);
 88e:	60 e0       	ldi	r22, 0x00	; 0
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
							CLCD_WriteChar(" ");
 896:	81 2f       	mov	r24, r17
 898:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
							CLCD_SendString(str12);
 89c:	86 ed       	ldi	r24, 0xD6	; 214
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
							DIO_enumSetPinValue(DIO_PIN3,DIO_PORTA,DIO_LOW);
 8a4:	40 e0       	ldi	r20, 0x00	; 0
 8a6:	60 e0       	ldi	r22, 0x00	; 0
 8a8:	83 e0       	ldi	r24, 0x03	; 3
 8aa:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>
 8ae:	cf cf       	rjmp	.-98     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
						}
						else if(s1=='2'&&ch1=='1')
 8b0:	d2 33       	cpi	r29, 0x32	; 50
 8b2:	99 f4       	brne	.+38     	; 0x8da <__stack+0x7b>
 8b4:	c1 33       	cpi	r28, 0x31	; 49
 8b6:	89 f4       	brne	.+34     	; 0x8da <__stack+0x7b>
						{
							CLCD_GoTo(0,0);
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
							CLCD_WriteChar(" ");
 8c0:	81 2f       	mov	r24, r17
 8c2:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
							CLCD_SendString(str13);
 8c6:	8e ed       	ldi	r24, 0xDE	; 222
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
							DIO_enumSetPinValue(DIO_PIN4,DIO_PORTA,DIO_HIGH);
 8ce:	41 e0       	ldi	r20, 0x01	; 1
 8d0:	60 e0       	ldi	r22, 0x00	; 0
 8d2:	84 e0       	ldi	r24, 0x04	; 4
 8d4:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>
 8d8:	ba cf       	rjmp	.-140    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
						}
						else
						{
							CLCD_GoTo(0,0);
 8da:	60 e0       	ldi	r22, 0x00	; 0
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_GoTo>
							CLCD_WriteChar(" ");
 8e2:	81 2f       	mov	r24, r17
 8e4:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
							CLCD_SendString(str14);
 8e8:	85 ee       	ldi	r24, 0xE5	; 229
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
								DIO_enumSetPinValue(DIO_PIN4,DIO_PORTA,DIO_LOW);
 8f0:	40 e0       	ldi	r20, 0x00	; 0
 8f2:	60 e0       	ldi	r22, 0x00	; 0
 8f4:	84 e0       	ldi	r24, 0x04	; 4
 8f6:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_enumSetPinValue>
 8fa:	a9 cf       	rjmp	.-174    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
					CLCD_SendString(str3);
					_delay_ms(2000);
				}
				else  
				{
					CLCD_CLR();
 8fc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CLCD_CLR>
					CLCD_WriteChar(" ");
 900:	8e 2d       	mov	r24, r14
 902:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_WriteChar>
					CLCD_SendString(str6); 
 906:	8a e9       	ldi	r24, 0x9A	; 154
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 c0 00 	call	0x180	; 0x180 <CLCD_SendString>
 90e:	2f e3       	ldi	r18, 0x3F	; 63
 910:	82 e4       	ldi	r24, 0x42	; 66
 912:	9f e0       	ldi	r25, 0x0F	; 15
 914:	21 50       	subi	r18, 0x01	; 1
 916:	80 40       	sbci	r24, 0x00	; 0
 918:	90 40       	sbci	r25, 0x00	; 0
 91a:	e1 f7       	brne	.-8      	; 0x914 <__stack+0xb5>
 91c:	00 c0       	rjmp	.+0      	; 0x91e <__stack+0xbf>
 91e:	00 00       	nop
						}
					}
				}
			break;
		}
	}
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	1f 91       	pop	r17
 92a:	0f 91       	pop	r16
 92c:	ff 90       	pop	r15
 92e:	ef 90       	pop	r14
 930:	08 95       	ret

00000932 <_exit>:
 932:	f8 94       	cli

00000934 <__stop_program>:
 934:	ff cf       	rjmp	.-2      	; 0x934 <__stop_program>
